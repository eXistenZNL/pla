{
  "name": "Pla",
  "tagline": "Coder's simplest workflow automation tool.",
  "body": "# Pla\r\n\r\nPla helps you automate workflows in a very simple way. Much like make, but with a yaml file structure.\r\n\r\nIt's a coder's simplest workflow automation tool.\r\n\r\n[![Build Status](https://travis-ci.org/rtuin/pla.svg?branch=master)](https://travis-ci.org/rtuin/pla)\r\n\r\n## Install\r\n\r\nPla requires Python 2.x. \r\nUse the pip installer to install Pla.\r\n\r\n``` bash\r\n$ (sudo) pip install pla\r\n```\r\n\r\nIf pip is not present on your system:\r\n```\r\n$ sudo easy_install pip\r\n```\r\n\r\n_**Note:** OS X Users reported that [Homebrew](http://brew.sh/)'s version of Python works better than the stock one._\r\n\r\n### Upgrade an existing installation\r\n\r\nWhen installed with Pip you can upgrade to the latest version using:\r\n```shell\r\n$ (sudo) pip install pla --upgrade\r\n```\r\n\r\n### Install from git\r\nTo install Pla from git you first need to make sure Pla is uninstalled. Then you must clone the repository and install \r\nthe development version:\r\n\r\n```shell\r\n$ pip uninstall pla\r\n$ git clone git@github.com:rtuin/pla.git\r\n$ cd pla\r\n$ pip install -e .\r\n```\r\n\r\n## Usage\r\n\r\n```shell\r\n$ pla [target]\r\n```\r\n\r\nIf you do not provide a target, the default target called `all` will run.\r\n\r\n## Start working with Pla\r\n\r\nPla works similar to [Make](https://www.gnu.org/software/make/). You define the targets in a Yaml file called `Plafile.yml`\r\nand run the targets from the command line.\r\n\r\nLets say we use Pla to kickstart our working day. We will make a Plafile which starts our local dev server, starts our IDE\r\n and opens the application we're working on in the browser.\r\n \r\nFirst create the Plafile with a target called `dev`:\r\n\r\n```yaml\r\n# Plafile.yml\r\ndev:\r\n  - docker-compose up -d\r\n  - pstorm .\r\n  - open http://local.project.url/\r\n```\r\n\r\nThen simply run Pla from the command line:\r\n```bash\r\n$ pla dev\r\n```\r\n\r\nPla will then run the shell commands you specified in the Plafile.\r\n\r\n### About the current working directory\r\n\r\nPla will use the directory of the Plafile as its current working directory. As of v0.6 Pla looks for the\r\nPlafile.yml in the parent directory if there is none in the directory that you're running Pla from.\r\n\r\nFor example, let's say this is your project file structure:\r\n```\r\nyour-project/\r\n├── Plafile.yml\r\n└── subdirectory\r\n    └── somefile\r\n```\r\n\r\nAnd this is your Plafile.yml:\r\n\r\n```yaml\r\ntest:\r\n  - echo $(pwd); exit 1\r\n```\r\n\r\nWhen you run Pla from the project root (where the Plafile.yml is), you will see this:\r\n\r\n```\r\nrtuin at localhost in ~/your-project\r\n$ pla test\r\nPla master by Richard Tuin - Coder's simplest workflow automation tool.\r\n\r\nRunning target \"test\":\r\n    ✘ echo $(pwd); exit 1:\r\n        /Users/rtuin/projects/your-project\r\n```\r\n\r\nAnd when you run Pla from the subdirectory, you will see this:\r\n\r\n```\r\nrtuin at localhost in ~/your-project/subdirectory\r\n$ pla test\r\nPla master by Richard Tuin - Coder's simplest workflow automation tool.\r\n\r\nRunning target \"test\":\r\n    ✘ echo $(pwd); exit 1:\r\n        /Users/rtuin/projects/your-project\r\n```\r\n\r\n## Features\r\n\r\n### Linking targets\r\n\r\nAs of Pla v0.2 it is possible to let your targets call each other. This is simply done by refering to the target \r\nprepended with an `=` sign. Like so:\r\n\r\n```yaml\r\n# Plafile.yml\r\nup:\r\n  - docker-compose up -d\r\n  - =updatecode\r\n  - pstorm .\r\n  - open http://local.project.url/\r\n  \r\nupdatecode:\r\n  - git submodule update --init --recursive\r\n  - composer install\r\n```\r\n\r\n### Target parameters\r\n\r\nPla v0.3 gives you the ability to variables in target commands. This feature is called target parameters.\r\n \r\nSimply define the parameters in the target definition, and put them in your command. Enclosing the parameters name with \r\n`%` signs. For example:\r\n\r\n```yaml\r\n# Plafile.yml\r\npr[number]:\r\n  - git pr %number%\r\n  - git pull upstream master\r\n```\r\n\r\nYou can then call the target like this:\r\n\r\n```bash\r\n$ pla pr 123\r\n```\r\n\r\n  **Disclaimer** The current implementation of target parameters is built to work only when you directly call the\r\n  parametrized target.\r\n  \r\n### Command OS filter\r\n\r\nWhen you run the same Pla target on multiple operating systems you might want to specify which command to execute on what OS.\r\nYou can do this by prefixing your command with a filter that indicates the OS's family name.\r\n \r\n```yaml\r\n# Plafile\r\nos:\r\n  - (darwin) echo \"Mac OS\"\r\n  - (redhat) echo \"RedHat family\"\r\n  - (ubuntu|darwin) echo \"Ubuntu or Mac OS\"\r\n  - (debian) echo \"Debian\"\r\n```\r\n\r\nIf you run `pla os` on a Mac, you'll get the following output:\r\n```\r\nRunning target \"os\":\r\n    ✔ (darwin) echo \"Mac OS\"\r\n    . (redhat) echo \"RedHat family\"\r\n    ✔ (ubuntu|darwin) echo \"Ubuntu or Mac OS\"\r\n    . (debian) echo \"Debian\"\r\n```\r\n\r\n**Operating systems matches**\r\n\r\n| System/Family | Match   |\r\n|---------------|---------|\r\n| Linux         | linux   |\r\n| Ubuntu        | ubuntu  |\r\n| Red Hat       | redhat  |\r\n| Mac OS        | darwin  |\r\n| Windows       | windows |\r\n\r\n### Target descriptions\r\n\r\nSometimes you want insight in which part of the Plafile is running. You can do this by giving targets descriptions.\r\nA description can be added in the form of a comment on the same line as the target definition, like so:\r\n\r\n```yaml\r\ntargetname: # Echo sleep and echo\r\n  - echo \"ohai\"\r\n  - sleep 1\r\n  - echo \"bar\"\r\n```\r\n\r\nThis will generate the following output:\r\n\r\n```\r\n$ pla targetname\r\nPla master by Richard Tuin - Coder's simplest workflow automation tool.\r\n\r\nRunning target \"targetname\":\r\n  Echo sleep and echo\r\n    ✔ echo \"ohai\"\r\n    ✔ sleep 1\r\n    ✔ echo \"bar\"\r\n```\r\n\r\n## Changelog\r\n\r\nAll notable changes are documented in the [changelog file](CHANGELOG.md).\r\n\r\n## Credits\r\n\r\n- [Richard Tuin](https://github.com/rtuin)\r\n- [All Contributors](../../contributors)\r\n\r\n## License\r\n\r\nThe MIT License (MIT). Please see the [license file](LICENSE) for more information.\r\n",
  "google": "UA-259721-9",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}